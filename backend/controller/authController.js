const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/User');

// –ë“Ø—Ä—Ç–≥—ç–ª —Ö–∏–π—Ö
exports.registerUser = async (req, res) => {
  const { name, email, password } = req.body;
  try {
    // –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∏–º—ç–π–ª –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: '–ò–º—ç–π–ª –±“Ø—Ä—Ç–≥—ç–≥–¥—Å—ç–Ω –±–∞–π–Ω–∞' });
    }

    // üëâ Hash —Ö–∏–π—Ö —à–∞–∞—Ä–¥–ª–∞–≥–∞–≥“Ø–π ‚Äî model –Ω—å –∞–≤—Ç–æ–º–∞—Ç–∞–∞—Ä —Ö–∏–π–Ω—ç
    const newUser = new User({ name, email, password });
    await newUser.save();

    // JWT —Ç–æ–∫–µ–Ω “Ø“Ø—Å–≥—ç—Ö
    const token = jwt.sign({ userId: newUser._id }, process.env.JWT_SECRET, { expiresIn: '1h' });

    res.status(201).json({ token, user: newUser });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// –ù—ç–≤—Ç—Ä—ç—Ö
exports.loginUser = async (req, res) => {
  const { email, password } = req.body;
  try {
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(400).json({ message: '–ò–º—ç–π–ª –±“Ø—Ä—Ç–≥—ç–ª–≥“Ø–π –±–∞–π–Ω–∞' });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    console.log('Password match:', isMatch);

    if (!isMatch) {
      return res.status(400).json({ message: '–ù—É—É—Ü “Ø–≥ –±—É—Ä—É—É –±–∞–π–Ω–∞' });
    }

    const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });

    res.status(200).json({ token, user });
  } catch (error) {
    res.status(500).json({ message: '–°–µ—Ä–≤–µ—Ä–∏–π–Ω –∞–ª–¥–∞–∞' });
  }
};
